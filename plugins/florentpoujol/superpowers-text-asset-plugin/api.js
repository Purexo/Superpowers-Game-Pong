(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){


SupAPI.registerPlugin('typescript', 'Text asset', {
  code: "/// <reference path=\"SupAsset.d.ts\" />\r\n\r\n/**\r\n* @private\r\n*/\r\nvar _textAssetParsers = (<any>window).textAssetParsers;\r\n\r\n/**\r\n* @private\r\n* Modes that have a parse function.\r\n*/\r\nvar _parsableModes = [\"JSON\", \"CSON\", \"HTML\", \"Jade\", \"Markdown\", \"Less\"];\r\n\r\n/**\r\n* @private\r\n*/\r\nvar _lcParsableModes = [\"json\", \"cson\", \"html\", \"jade\", \"markdown\", \"less\"];\r\n\r\nmodule Sup {\r\n  /**\r\n  * A generic `text` asset with possibility to change the editor's syntactic coloration per asset \r\n  * as well as to parse content from and to various formats.\r\n  */\r\n  export class Text extends Asset {\r\n    /**\r\n    * Returns the asset's content after having removed the `codemirror-mode:[value]` line.\r\n    */\r\n    get text(): string {\r\n      return this.__inner.replace( /codemirror-mode:\\s*[a-zA-Z\\/+-]+/gi, \"\" );\r\n    }\r\n\r\n    /**\r\n    * Returns the asset's mode as defined by the `codemirror-mode` line, or null.\r\n    */\r\n    get mode(): string {\r\n      var mode: string = null;\r\n      var result = /codemirror-mode:\\s*([a-zA-Z\\/+-]+)/gi.exec( this.__inner );\r\n      if (result != null && result[1] != null)\r\n        mode = result[1];\r\n      return mode;\r\n    }\r\n\r\n    /**\r\n    * Parse the provided text based on the format defined by the `codemirror-mode` line in the provided text or the mode argument.\r\n    * @param text - Some text to be parsed. Use the asset's content if absent.\r\n    * @param mode - Case-agnostic data-format of the text to parse.\r\n    */\r\n    parse( text?: string, mode = \"\" ): any {\r\n      if ( text === undefined ) {\r\n        text = this.__inner;\r\n      }\r\n\r\n      if ( mode == \"\" ) {\r\n        var result = /codemirror-mode:\\s*([a-zA-Z\\/+-]+)/gi.exec( text );\r\n        if (result != null && result[1] != null)\r\n          mode = result[1];\r\n      }\r\n      \r\n      if ( mode !== \"\" ) {\r\n        var i = _lcParsableModes.indexOf( mode.toLowerCase() );\r\n        if ( i !== -1 ){\r\n          text = text.replace( /codemirror-mode:\\s*[a-zA-Z\\/+-]+/gi, \"\" );\r\n          return this[ \"parse\"+_parsableModes[i] ]( text );\r\n        }\r\n        else {\r\n          console.error( \"Sup.Text.parse(): No parse[Mode]() function found for mode:\", mode );\r\n          return null;\r\n        }\r\n      }\r\n      else\r\n        console.warn( \"Sup.Text.parse(): Could not find mode from asset content or provided text.\" );\r\n      return text;\r\n    }\r\n\r\n    /**\r\n    * Parse a JSON string to JS object.\r\n    * @param text - Some valid JSON string. Use the asset's content if absent.\r\n    * @returns A JavaScript object.\r\n    */\r\n    parseJSON( text?: string ): any {\r\n      if ( text === undefined ) {\r\n        text = this.__inner;\r\n      }\r\n      var text = text.replace( /\\/\\/.*/gi, \"\" );\r\n      return _textAssetParsers.jsonlint.parse( text ); // use jsonlint because the error messages returned by the built-in JSON doesn't help at all...\r\n    }\r\n\r\n    /**\r\n    * Parse a CSON string to JS object.\r\n    * @param text - Some valid CSON string. Use the asset's content if absent.\r\n    * @returns A JavaScript object.\r\n    */\r\n    parseCSON( text?: string ): any {\r\n      if ( text === undefined ) {\r\n        text = this.__inner;\r\n      }\r\n      return _textAssetParsers.CSON.parse( text ); \r\n    }\r\n\r\n    /**\r\n    * Parse a HTML string to DOM Element.\r\n    * @param text - Some valid HTML string. Use the asset's content if absent.\r\n    * @returns A single DOM Node instance if there was a single root element in the provided HTML, or a DocumentFragment instance.\r\n    */\r\n    parseHTML( text?: string ): any {\r\n      if ( text === undefined ) {\r\n        text = this.__inner;\r\n      }\r\n      var dom = text.replace( /<!--.*-->/gi, \"\" ); // remove comments before domify\r\n      return _textAssetParsers.domify( dom );\r\n    }\r\n\r\n    /**\r\n    * Parse a markdown string to HTML string.\r\n    * @param text - Some valid markdown string. Use the asset's content if absent.\r\n    * @returns A valid HTML string.\r\n    */\r\n    parseMarkdown( text?: string ): string {\r\n      if ( text === undefined ) {\r\n        text = this.text;\r\n      }\r\n      return _textAssetParsers.markdown.toHTML( text );\r\n    }\r\n\r\n    /**\r\n    * Parse a Jade string to HTML string. <br>\r\n    * Note that the support of Jade's features is basically limited to the syntactic sugars (no includes, no code...).\r\n    * @param text - Some valid Jade string. Use the asset's content if absent.\r\n    * @returns A valid HTML string.\r\n    */\r\n    parseJade( text?: string ): string {\r\n      if ( text === undefined ) {\r\n        text = this.__inner;\r\n      }\r\n      return _textAssetParsers.jade.compile( text )();\r\n    }\r\n\r\n    /**\r\n    * Parse a Less string to CSS string.\r\n    * @param text - Some valid Less string. Use the asset's content if absent.\r\n    * @returns A valid CSS string.\r\n    */\r\n    parseLess( text?: string ): string {\r\n      if ( text === undefined ) {\r\n        text = this.__inner;\r\n      }\r\n      var css = \"\";\r\n      _textAssetParsers.less.render( text, {}, function(err: Error, output: any) {\r\n        if (err) {\r\n          console.error(err);\r\n          css = err.toString();\r\n          return;\r\n        }\r\n        css = output.css;\r\n      } );\r\n      return css;\r\n    }\r\n  }\r\n}\r\n".replace("<ref", "<_ref"),
  defs: "// Text asset plugin\r\n// https://github.com/florentpoujol/superpowers-text-asset-plugin\r\n// Adds a generic text asset of type text/Sup.Text\r\n\r\n// Documentation:\r\n// https://florentpoujol.github.io/superpowers-text-asset-plugin\r\n\r\n// You can also access the documentation offline in the plugin's \"public/docs\" folder \r\n// or via the \"Docs browser\" tool provided by the \"Docs browser\" plugin: https://github.com/florentpoujol/superpowers-docs-browser-plugin\r\n\r\ndeclare module Sup {\r\n  class Text extends Asset {\r\n    text: string; // readonly\r\n    mode: string; // readonly\r\n    parse(text?: string, mode?: string): any;\r\n    parseJSON(text?: string): any; // returns JS object or array\r\n    parseCSON(text?: string): any; // returns JS object or array\r\n    parseHTML(text?: string): any; // returns a DOM Node or a DocumentFragment instance\r\n    parseMarkdown(text?: string): string; // returns valid HTML string\r\n    parseJade(text?: string): string; // returns valid HTML string\r\n    parseLess(text?: string): string; // returns valid CSS string\r\n  }\r\n}\r\n"
});

},{}]},{},[1]);
